socdist1.cpp

一种可怕的新疾病，COWVID-19，开始在世界各地的奶牛中传播。农夫约翰正试图采取尽可能多的预防措施，以保护他的牛群免受感染。
农夫约翰的牛棚是一个狭长的建筑物，有一排共N个牛栏（2≤N≤10^5）。这些牛栏中有一些目前有奶牛住着，有些空着。得知“社交距离”的重要性后，农夫约翰想最大化奶牛之间的距离D，其中D是最近的两个奶牛占用的牛栏之间的距离。例如，如果牛栏3和8是最接近的牛栏，则D=5。

最近有两头奶牛新来到农夫约翰的牛群，他需要确定应该将它们分配给哪两个以前空着的牛栏，以使得D值仍然尽可能大。农夫约翰不能移动任何已有的奶母。他只想给新奶牛分配牛栏。

输入格式（文件socdist1.in）：
输入的第一行包含N。下一行包含长度为N的字符串，由0和1组成，描述牛棚里的牛栏。0表示空着的牛栏，1表示有奶牛的牛栏。字符串包含至少有两个0，因此至少有足够的空间安置两头新来的奶牛。

输出格式（文件socdist1.out）：
输出农夫约翰以最佳方案在加入两头新来的奶牛后可以达到的最大D值（D为两个占用的牛栏之间的最近距离）。

输入样例1：
14
10001001000010
输出样例1：
2

样例1解释：
在此样例中，农夫约翰可以以这样的方式加入奶牛，使得牛栏分配变为10x010010x0010，其中x表示新来的奶牛。此时，D=2。不可能在加入新奶牛之后取到更大的D值。

评分规则：
测试样例2-6满足N≤10。
测试样例7-8满足N≤100。
测试样例9-11满足N≤5000。
测试样例12-15没有额外限制。
